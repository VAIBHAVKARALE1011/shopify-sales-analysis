--Create database

--create table
drop table if exists shopify
create table shopify (
    admin_graphql_api_id TEXT,
    order_number INT,
    billing_address_country TEXT,
    billing_address_first_name TEXT,
    billing_address_last_name TEXT,
    billing_address_province TEXT,
    billing_address_zip TEXT,
    city TEXT,
    currency TEXT,
    customer_id INT,
    invoice_date TIMESTAMP,
    gateway TEXT,
    product_id float,
    product_type TEXT,
    variant_id float,
    quantity INT,
    subtotal_price DECIMAL(10, 2),
    total_price_inr DECIMAL(10, 2),
    total_tax DECIMAL(10, 2)
);

--- 
select * from shopify ;

--
--1. Transactions Performance
--This section focuses on evaluating the overall health and effectiveness of sales operations by tracking
--Net Sales: Total revenue generated before tax
create view total_revenue_generated_before_tax as
select sum(subtotal_price) as total_revenue_generated_before_tax from shopify;

drop view total_revenue_generated_before_tax
--Total Quantity: The cumulative number of products sold.
create view cumulative_number_of_products_sold as
select sum(quantity) as cumulative_number_of_products_sold 
from shopify ;


--Net Avg Order Value: The average revenue per transaction, excluding tax.
create view Net_Avg_Order_Value as
select sum(subtotal_price) * 1.0 / count(distinct order_number) as Net_Avg_Order_Value  from shopify;


--2. Customer Purchase Behavior
--Understanding how customers interact with the business is critical. This section highlights:
--Total Customers: The count of unique buyers.
create view  Total_Customers as
select count (distinct customer_id ) as Total_Customers
from shopify ;

--Single Order Customers: Customers who placed only one order.
create view Single_Order_Customers as
SELECT COUNT(*) AS single_order_customers
FROM (
    SELECT customer_id
    FROM shopify
    GROUP BY customer_id
    HAVING COUNT(order_number) = 1
) AS one_time_customers;

--Repeat Customers: Customers with more than one order, indicating loyalty.
create view Repeat_Customers as
SELECT COUNT(*) AS Repeat_order_customers
from(
select customer_id , count(order_number) as total_orders
from shopify 
group by customer_id
having count(order_number) >1 )
as repitative_customer ;
drop view  Repeat_Customers
--3. Retention & Value KPIs
--To evaluate long-term growth and customer value, this section includes:
--Lifetime Value (LTV): The total revenue generated by a customer over time.
create view total_revenue_generated as 
select count(*) as Lifetime_Value from  
(select customer_id,sum(total_price_inr) as total_revenue_generated 
from shopify
group by customer_id 
order by total_revenue_generated) as  total_life_revenue;

--Purchase Frequency: How often customers place orders, on average.
create view avg_purchase_frequency as 
select count(order_number)* 1.0 / count ( distinct customer_id) as avg_purchase_frequency
from shopify ;

--Repeat Rate: The percentage of customers who return to make another purchase.
create view percentage_of_repetative_customers  as 
select
	(count(distinct case when order_count > 1 then customer_id end) * 100.0 )/
	count(distinct customer_id) as repetative_customer_id
from (
select customer_id,count(order_number ) as order_count from shopify 
group by customer_id
) as customers_orders ;


-- Step 1: Create a temporary table of states and cities with row numbers
CREATE TEMP TABLE temp_state_city (
    rn INT,
    state TEXT,
    city TEXT
);

-- Step 2: Insert diverse state-city combinations with row numbers
INSERT INTO temp_state_city (rn, state, city)
SELECT ROW_NUMBER() OVER (), *
FROM (VALUES
    ('Maharashtra', 'Mumbai'), ('Maharashtra', 'Pune'), ('Maharashtra', 'Nagpur'), ('Maharashtra', 'Nashik'),
    ('Karnataka', 'Bangalore'), ('Karnataka', 'Mysore'), ('Karnataka', 'Hubli'),
    ('Tamil Nadu', 'Chennai'), ('Tamil Nadu', 'Coimbatore'), ('Tamil Nadu', 'Madurai'),
    ('West Bengal', 'Kolkata'), ('West Bengal', 'Siliguri'), ('West Bengal', 'Durgapur'),
    ('Gujarat', 'Ahmedabad'), ('Gujarat', 'Surat'), ('Gujarat', 'Vadodara'),
    ('Uttar Pradesh', 'Lucknow'), ('Uttar Pradesh', 'Kanpur'), ('Uttar Pradesh', 'Varanasi'),
    ('Rajasthan', 'Jaipur'), ('Rajasthan', 'Udaipur'), ('Rajasthan', 'Jodhpur'),
    ('Punjab', 'Amritsar'), ('Punjab', 'Ludhiana'), ('Punjab', 'Jalandhar'),
    ('Kerala', 'Thiruvananthapuram'), ('Kerala', 'Kochi'), ('Kerala', 'Kozhikode'),
    ('Andhra Pradesh', 'Visakhapatnam'), ('Andhra Pradesh', 'Vijayawada'), ('Andhra Pradesh', 'Guntur'),
    ('Bihar', 'Patna'), ('Bihar', 'Gaya'), ('Bihar', 'Bhagalpur'),
    ('Madhya Pradesh', 'Indore'), ('Madhya Pradesh', 'Bhopal'), ('Madhya Pradesh', 'Jabalpur'),
    ('Odisha', 'Bhubaneswar'), ('Odisha', 'Cuttack'), ('Odisha', 'Rourkela'),
    ('Jharkhand', 'Ranchi'), ('Jharkhand', 'Jamshedpur'), ('Jharkhand', 'Dhanbad'),
    ('Assam', 'Guwahati'), ('Assam', 'Dibrugarh'), ('Assam', 'Silchar'),
    ('Chhattisgarh', 'Raipur'), ('Chhattisgarh', 'Bilaspur'), ('Chhattisgarh', 'Durg')
) AS t(state, city);

-- Step 3: Add a temporary row number to the main shopify table
ALTER TABLE shopify ADD COLUMN rn INT;

-- Step 4: Update row numbers
UPDATE shopify
SET rn = sub.rn
FROM (
  SELECT order_number, ROW_NUMBER() OVER () AS rn
  FROM shopify
) AS sub
WHERE shopify.order_number = sub.order_number;

-- Step 5: Update the shopify table with city/state using the row numbers
UPDATE shopify
SET
  billing_address_province = t.state,
  city = t.city
FROM temp_state_city t
WHERE shopify.rn = t.rn;

-- Step 6: Cleanup: Drop temporary columns
ALTER TABLE shopify DROP COLUMN rn;
DROP TABLE temp_state_city;




UPDATE shopify
SET billing_address_province = CASE LOWER(city)
  WHEN 'mumbai' THEN 'Maharashtra'
  WHEN 'pune' THEN 'Maharashtra'
  WHEN 'nashik' THEN 'Maharashtra'
  WHEN 'nagpur' THEN 'Maharashtra'
  WHEN 'varodara' THEN 'Gujarat'
  WHEN 'ahmedabad' THEN 'Gujarat'
  WHEN 'surat' THEN 'Gujarat'
  WHEN 'vadodara' THEN 'Gujarat'
  WHEN 'bhopal' THEN 'Madhya Pradesh'
  WHEN 'indore' THEN 'Madhya Pradesh'
  WHEN 'gwalior' THEN 'Madhya Pradesh'
  WHEN 'jabalpur' THEN 'Madhya Pradesh'
  WHEN 'bhagalpur' THEN 'Bihar'
  WHEN 'patna' THEN 'Bihar'
  WHEN 'gaya' THEN 'Bihar'
  WHEN 'varanasi' THEN 'Uttar Pradesh'
  WHEN 'kanpur' THEN 'Uttar Pradesh'
  WHEN 'lucknow' THEN 'Uttar Pradesh'
  WHEN 'agra' THEN 'Uttar Pradesh'
  WHEN 'noida' THEN 'Uttar Pradesh'
  WHEN 'jodhpur' THEN 'Rajasthan'
  WHEN 'jaipur' THEN 'Rajasthan'
  WHEN 'udaipur' THEN 'Rajasthan'
  WHEN 'amritsar' THEN 'Punjab'
  WHEN 'ludhiana' THEN 'Punjab'
  WHEN 'jalandhar' THEN 'Punjab'
  WHEN 'delhi' THEN 'Delhi'
  WHEN 'chandigarh' THEN 'Chandigarh'
  WHEN 'ranchi' THEN 'Jharkhand'
  WHEN 'jamshedpur' THEN 'Jharkhand'
  WHEN 'dhanbad' THEN 'Jharkhand'
  WHEN 'raipur' THEN 'Chhattisgarh'
  WHEN 'bilaspur' THEN 'Chhattisgarh'
  WHEN 'durg' THEN 'Chhattisgarh'
  WHEN 'rourkela' THEN 'Odisha'
  WHEN 'cuttak' THEN 'Odisha'
  WHEN 'bhuvaneshawar' THEN 'Odisha'
  WHEN 'kolkata' THEN 'West Bengal'
  WHEN 'siliguri' THEN 'West Bengal'
  WHEN 'durgapur' THEN 'West Bengal'
  WHEN 'guwahati' THEN 'Assam'
  WHEN 'diburgrah' THEN 'Assam'
  WHEN 'silchar' THEN 'Assam'
  WHEN 'gunture' THEN 'Andhra Pradesh'
  WHEN 'vijaywada' THEN 'Andhra Pradesh'
  WHEN 'vishakapatanam' THEN 'Andhra Pradesh'
  WHEN 'hyderbad' THEN 'Telangana'
  WHEN 'banglore' THEN 'Karnataka'
  WHEN 'mysore' THEN 'Karnataka'
  WHEN 'hubali' THEN 'Karnataka'
  WHEN 'chennai' THEN 'Tamil Nadu'
  WHEN 'madhurai' THEN 'Tamil Nadu'
  WHEN 'combattur' THEN 'Tamil Nadu'
  WHEN 'kochi' THEN 'Kerala'
  WHEN 'thiruanantapuram' THEN 'Kerala'
  WHEN 'koziode' THEN 'Kerala'
  ELSE billing_address_province -- if no match, leave as-is
END;


UPDATE shopify
SET billing_address_province = CASE
    WHEN city = 'Thiruvananthapuram' THEN 'Kerala'
    WHEN city = 'Kozhikode' THEN 'Kerala'
    WHEN city = 'Hyderabad' THEN 'Telangana'
    WHEN city = 'Vijaywada' THEN 'Andhra Pradesh'
    WHEN city = 'Bangalore' OR city = 'Banglore' THEN 'Karnataka'
    WHEN city = 'Coimbatore' OR city = 'Coimbature' THEN 'Tamil Nadu'
    ELSE billing_address_province
END
WHERE city IN (
    'Thiruvananthapuram', 'Kozhikode', 'Hyderabad', 'Vijaywada', 
    'Bangalore', 'Banglore', 'Coimbatore', 'Coimbature'
);

UPDATE shopify
SET billing_address_province = CASE
     WHEN city = 'Vijayawada' THEN 'Andhra Pradesh' 
    WHEN city = 'Visakhapatnam' THEN  'Andhra Pradesh'  
    ELSE billing_address_province
END
WHERE city IN (
     'Vijayawada', 'Visakhapatnam'
     ); 